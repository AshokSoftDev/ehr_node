// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Appointment {
  appointment_id     Int      @id @default(autoincrement())
  patient_id         Int
  doctor_id          String
  appointment_date   DateTime
  start_time         DateTime
  end_time           DateTime
  duration           Int?
  appointment_type   String
  reason_for_visit   String?
  appointment_status String
  notes              String?
  // Snapshot fields (denormalized for reporting/search)
  patient_mrn        String
  patient_title      String
  patient_firstName  String
  patient_lastName   String
  doctor_title       String
  doctor_firstName   String
  doctor_lastName    String
  doctor_specialty   String

  // Status & Audit
  status    Int       @default(1) // 1=active, 0=inactive / cancelled
  createdAt DateTime  @default(now())
  createdBy String?
  updatedAt DateTime  @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  // Relations
  patient Patient @relation(fields: [patient_id], references: [patient_id])
  doctor  Doctor  @relation(fields: [doctor_id], references: [id])

  @@index([patient_id])
  @@index([doctor_id])
  @@index([appointment_date])
  @@index([status])
}


model Doctor {
    id           String   @id @default(uuid())
    title        String
    firstName    String
    lastName     String
    dob          DateTime
    email        String   @unique
    licenceNo    String   @unique
    degree       String
    specialty    String
    timeBlock    String? // optional - stores values like "5min", "10min", "15min", "30min", "1hr", "1.5hr", "2hr", "3hr"
    displayName  String
    displayColor String // hex color code

    // Optional address fields
    address String?
    area    String?
    city    String?
    state   String?
    country String?
    pincode String?

    // Status field
    status Int @default(1) // 1=active, 0=inactive

    // Audit fields
    createdAt DateTime  @default(now())
    createdBy String?
    updatedAt DateTime  @updatedAt
    updatedBy String?
    deletedAt DateTime?
    deletedBy String?

    // Relations
    patientInfos PatientInfo[]
    appointments Appointment[]

    @@index([email])
    @@index([licenceNo])
    @@index([specialty])
    @@index([status])
    @@index([createdAt])
    @@index([deletedAt])
}


// Master data models: Insurance, Allergy

model Insurance {
  i_id           Int       @id @default(autoincrement())
  type           String
  company        String
  policy         String
  policyNo       String
  validationFrom DateTime
  validationTo   DateTime
  notes          String?

  // Status & Audit
  status    Int       @default(1) // 1=active, 0=inactive
  createdAt DateTime  @default(now())
  createdBy String?
  updatedAt DateTime  @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
}

model Allergy {
  allergy_id  Int      @id @default(autoincrement())
  allergyName String
  allergyType String

  // Status & Audit
  status    Int       @default(1) // 1=active, 0=inactive
  createdAt DateTime  @default(now())
  createdBy String?
  updatedAt DateTime  @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  // Relations
  patientAllergies PatientAllergy[]

  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
}


model Patient {
  patient_id   Int      @id @default(autoincrement())
  mrn          String   @unique
  title        String
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  age          Int?
  gender       String
  mobileNumber String
  address      String
  area         String
  city         String
  state        String
  country      String
  pincode      String
  aadhar       String?
  referalSource String?
  comments     String?
  activeStatus Int      @default(1)
  createdAt    DateTime @default(now())
  createdBy    String
  updatedAt    DateTime @updatedAt
  updatedBy    String

  // Relations
  infos        PatientInfo[]
  emergencies  PatientEmergency[]
  allergies    PatientAllergy[]
  appointments Appointment[]
}

model PatientInfo {
  pi_id           Int       @id @default(autoincrement())
  patient_id      Int
  bloodGroup      String
  overseas        Boolean
  passportNumber  String?
  validityDate    DateTime?
  occupation      String?
  department      String?
  companyName     String?
  designation     String?
  employeeCode    String?
  primaryDoctorId String?

  activeStatus Int       @default(1)
  createdAt    DateTime  @default(now())
  createdBy    String
  updatedAt    DateTime  @updatedAt
  updatedBy    String

  patient       Patient   @relation(fields: [patient_id], references: [patient_id])
  primaryDoctor Doctor?   @relation(fields: [primaryDoctorId], references: [id])

  @@index([patient_id])
  @@index([primaryDoctorId])
}

model PatientEmergency {
  pe_id         Int       @id @default(autoincrement())
  patient_id    Int
  name          String
  relation      String
  contactNumber String
  status        Int       @default(1) // 1=active, 0=inactive

  // Audit fields
  createdAt DateTime  @default(now())
  createdBy String?
  updatedAt DateTime  @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  patient Patient @relation(fields: [patient_id], references: [patient_id])

  @@index([patient_id])
}

model PatientAllergy {
  pa_id       Int       @id @default(autoincrement())
  patient_id  Int
  allergyId   Int?
  allergyName String

  // Status & Audit
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  createdBy String?
  updatedAt DateTime  @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  patient Patient @relation(fields: [patient_id], references: [patient_id])
  allergy Allergy? @relation(fields: [allergyId], references: [allergy_id])

  @@index([patient_id])
  @@index([allergyId])
  @@index([status])
}


// ------------------- USER -------------------
model User {
    userId      String  @id @default(uuid())
    title       String
    fullName    String
    firstName   String
    lastName    String
    email       String  @unique
    phoneNumber String? // optional
    groupId     String? // root user may not belong to any group
    password    String

    parentId    String?
    accountType String  @default("child")

    createdAt DateTime @default(now())
    createdBy String?
    updatedAt DateTime @updatedAt
    updatedBy String?

    userStatus Int       @default(1) // 1=active, 0=inactive
    dob        DateTime? // optional
    otp        String?
    otpExpiry  DateTime?

    group Group? @relation(fields: [groupId], references: [id])

    parent   User?  @relation("ParentChild", fields: [parentId], references: [userId])
    children User[] @relation("ParentChild")

    creator      User?  @relation("UserCreator", fields: [createdBy], references: [userId])
    createdUsers User[] @relation("UserCreator")

    updater      User?  @relation("UserUpdater", fields: [updatedBy], references: [userId])
    updatedUsers User[] @relation("UserUpdater")

    @@index([email])
    @@index([groupId])
    @@index([userStatus])
    @@index([parentId])
    @@index([accountType])
    @@index([createdBy])
}

// ------------------- GROUP -------------------
model Group {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    createdBy   String?
    updatedAt   DateTime @updatedAt
    updatedBy   String?

    users                User[]
    permissions          GroupModulePermission[]
    subModulePermissions GroupSubModulePermission[]
}

// ------------------- MODULE -------------------
model Module {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    subModules  SubModule[]
    permissions GroupModulePermission[]
}

// ------------------- SUB-MODULE (Dynamic Actions) -------------------
model SubModule {
    id          String  @id @default(uuid())
    moduleId    String
    name        String // e.g. "Add", "Edit", "Delete", "Export"
    description String?

    module      Module                     @relation(fields: [moduleId], references: [id])
    permissions GroupSubModulePermission[]

    @@unique([moduleId, name]) // one action per module
}

// ------------------- GROUP MODULE PERMISSION -------------------
model GroupModulePermission {
    id        String  @id @default(uuid())
    groupId   String
    moduleId  String
    hasAccess Boolean @default(true)

    group                Group                      @relation(fields: [groupId], references: [id])
    module               Module                     @relation(fields: [moduleId], references: [id])
    subModulePermissions GroupSubModulePermission[]

    @@unique([groupId, moduleId])
    @@index([groupId])
    @@index([moduleId])
}

// ------------------- GROUP SUB-MODULE PERMISSION -------------------
model GroupSubModulePermission {
    id                      String  @id @default(uuid())
    groupId                 String
    subModuleId             String
    allowed                 Boolean @default(false)
    groupModulePermissionId String?

    group                 Group                  @relation(fields: [groupId], references: [id])
    subModule             SubModule              @relation(fields: [subModuleId], references: [id])
    groupModulePermission GroupModulePermission? @relation(fields: [groupModulePermissionId], references: [id])

    @@unique([groupId, subModuleId])
    @@index([groupId])
    @@index([subModuleId])
}